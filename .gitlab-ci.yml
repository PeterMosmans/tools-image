---
# Pipeline template
# Includes several jobs
include:
  # build
  - .gitlab/docker-build.gitlab-ci.yml
  # sast
  - .gitlab/dockerfile-lint.gitlab-ci.yml
  # sast
  - .gitlab/code-sonarqube.gitlab-ci.yml
  # security
  - .gitlab/docker-analyze.gitlab-ci.yml
  # security
  - .gitlab/docker-lint.gitlab-ci.yml
  # security
  - .gitlab/code-dependencies.gitlab-ci.yml

variables:
  IMAGE_NAMESPACE: gofwd
  IMAGE_REPOSITORY: ${IMAGE_NAMESPACE}/${CI_PROJECT_NAME}
  IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}
  IMAGE_TAR: ${IMAGE_TAG}.tgz
  DOCKLE_PARMS: "--accept-file settings.py"
  JOB_FINGERPRINT: $CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID

stages:
  # Validates whether the project meets the minimum requirements
  - validate
  # security checks that don't need build
  - sast
  - build
  - test
  # security checks after build
  - security
  - deploy

# Note that this stage is defined here, so that other jobs can be dependent on it
validate:
  stage: validate
  image: gofwd/tools-image
  script:
    - mkdir -p reports &>/dev/null
    - rm -rf reports/detect-secrets-report.txt &>/dev/null
    - >
      if [ "$CI_COMMIT_BEFORE_SHA" = "0000000000000000000000000000000000000000" ]; then
      COMMIT_BEFORE_SHA=$(git rev-parse HEAD~1);
      else
      COMMIT_BEFORE_SHA=$CI_COMMIT_BEFORE_SHA;
      fi
    - >-
      echo "Checking the following files for secrets:
      $(git diff --name-only $COMMIT_BEFORE_SHA $CI_COMMIT_SHA)"
    - >
      git diff --name-only $COMMIT_BEFORE_SHA $CI_COMMIT_SHA |
      xargs detect-secrets-hook --baseline .detect-secrets.json |
      tee reports/detect-secrets-report.txt
  artifacts:
    name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
    when: always
    paths:
      - reports/detect-secrets-report.txt

.sast:
  stage: sast
  needs:
    - validate

test:
  stage: test
  dependencies: []
  variables:
    GIT_STRATEGY: none
  image: ${IMAGE_TAG}
  script:
    - anchore-cli --version
    - ansible-lint --version
    - black --version
    - curl --version
    - cyclonedx-py --help
    - detect-secrets --version
    - nikto.pl -Version
    - nmap --version
    - npm outdated --global
    - pylint --version
    - sonar-scanner --version
    - trufflehog --help
    - yamllint --version

.security:
  stage: security
  needs:
    - build
  variables:
    GIT_STRATEGY: none

.deploy:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  dependencies: []
  rules:
    - if: '$REGISTRY_PASSWORD == null'
      when: never

tag_latest:
  extends: .deploy
  script:
    - docker tag ${IMAGE_TAG} ${IMAGE_REPOSITORY}:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

tag_image:
  extends: .deploy
  script:
    - docker tag ${IMAGE_TAG} ${IMAGE_REPOSITORY}:$CI_COMMIT_TAG
  rules:
    - if: $CI_COMMIT_TAG

push:
  extends: .deploy
  script:
    - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin
    - docker push ${IMAGE_REPOSITORY}:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

push_tags:
  extends: .deploy
  script:
    - echo "$REGISTRY_PASSWORD" | docker login -u "$REGISTRY_USER" --password-stdin
    - docker push ${IMAGE_REPOSITORY}:$CI_COMMIT_TAG
  rules:
    - if: $CI_COMMIT_TAG
